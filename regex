isEmailOrEmpty: function(e) {
            return !!/^$|^([a-zA-Z0-9_.\-+])+@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(e)
        },
        isEmail: function(e) {
            return !!/^([a-zA-Z0-9_.\-+])+@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(e)
        },
        isIpv4OrEmpty: function(e) {
            return e !== c && !!/^$|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(e)
        },
        isIpv4ShorthandOrEmpty: function(e) {
            return !d.test(e) && !!/^$|^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\/([0-9]|[1-2][0-9]|3[0-2]))$/.test(e)
        },
        isValidDNS: function(e) {
            return !!/^(?:[a-zA-Z0-9]+(?:-[a-z0-9]+)*\.)+[a-z]{2,}$/.test(e)
        },
        isIpv4: function(e) {
            return e !== c && !!p.test(e)
        },
        isIPv4WithoutCheckingRejectIP: function(e) {
            return p.test(e)
        },
        isIPv4WithCIDR: function(e) {
            return h.test(e)
        },
        isHexDigit: function(e) {
            return e.match(/^[0-9a-fA-F]+$/g)
        },
        isValidVLANNumber: function(e) {
            return r.isNumber(e) && 1 <= e && e <= 4094 && r.isShortFormInteger(e)
        },
        isValidVLANNumberAndUntaggedVLAN: function(e) {
            return r.isNumber(e) && 1 <= e && e <= 4094 && r.isShortFormInteger(e) || 0 === e
        },
        isIpv6OrEmpty: function(e) {
            return !!f.test(e)
        },
        isIpv6: function(e) {
            return !!g.test(e)
        },
        isIP: function(e) {
            return e !== c && !!/^(?:(?:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9](?::|$)){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))$/.test(e)
        },
        isIPOrEmpty: function(e) {
            return e !== c && !!/^$|^(?:(?:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9](?::|$)){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))$/.test(e)
        },
        isIPAndZeroOrEmpty: function(e) {
            return !!/^$|^(?:(?:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9](?::|$)){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))$/.test(e)
        },
        isSubnetMask: function(e) {
            return !(["0.0.0.0", "128.0.0.0", "192.0.0.0", "224.0.0.0", "240.0.0.0", "248.0.0.0", "252.0.0.0", "254.0.0.0", "255.0.0.0", "255.128.0.0", "255.192.0.0", "255.224.0.0", "255.240.0.0", "255.248.0.0", "255.252.0.0", "255.254.0.0", "255.255.0.0", "255.255.128.0", "255.255.192.0", "255.255.224.0", "255.255.240.0", "255.255.248.0", "255.255.252.0", "255.255.254.0", "255.255.255.0", "255.255.255.128", "255.255.255.192", "255.255.255.224", "255.255.255.240", "255.255.255.248", "255.255.255.252", "255.255.255.254", "255.255.255.255"].indexOf(e) < 0)
        },
        isMacOrEmpty: function(e) {
            return e !== u && !!/^$|^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/.test(e)
        },
        isMac: function(e) {
            return e !== u && !!/^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/.test(e)
        },
        isMacIncludeStar: function(e) {
            return e !== u && !!/^([0-9a-fA-F(*)][0-9a-fA-F(*)]:){5}([0-9a-fA-F(*)][0-9a-fA-F(*)])$/.test(e)
        },
        isMacIncludeStarAndZero: function(e) {
            return !!/^([0-9a-fA-F(*)][0-9a-fA-F(*)]:){5}([0-9a-fA-F(*)][0-9a-fA-F(*)])$/.test(e)
        },
        isMacIncludeStarOrEmpty: function(e) {
            return e !== u && !!/^$|^([0-9a-fA-F(*)][0-9a-fA-F(*)]:){5}([0-9a-fA-F(*)][0-9a-fA-F(*)])$/.test(e)
        },
        isMacIncludeStarAndZeroOrEmpty: function(e) {
            return !!/^$|^([0-9a-fA-F(*)][0-9a-fA-F(*)]:){5}([0-9a-fA-F(*)][0-9a-fA-F(*)])$/.test(e)
        },
        isMacOUI: function(e) {
            return e !== u.substr(0, 8) && !!/^([0-9a-fA-F][0-9a-fA-F]:){2}([0-9a-fA-F][0-9a-fA-F])$/.test(e)
        },
        isMacOUIOrEmpty: function(e) {
            return e !== u.substr(0, 8) && !!/^$|^([0-9a-fA-F][0-9a-fA-F]:){2}([0-9a-fA-F][0-9a-fA-F])$/.test(e)
        },
        isBinaryNumber: function(e) {
            return !!/^[01]+$/.test(e)
        },
        isBinaryNumberOrEmpty: function(e) {
            return !!/^$|^[01]+$/.test(e)
        },
        isLastBinaryNumberIsOne: function(e) {
            var t = e.substr(0, 2)
              , n = ("00000000" + parseInt(t, 16).toString(2)).substr(-8).substr(7);
            return 1 !== Number(n)
        },
        isNumber: function(e) {
            return !isNaN(e)
        },
        isNumberGreater: function(e, t) {
            return t < e
        },
        isStringLength: function(e, t, n) {
            return !(e.length < t || e.length > n)
        },
        selectExistVlan: function(e) {
            var i = [];
            return _.forEach(e, function(e) {
                var t = e.name ? e.name : e;
                if (1 < t.split("-").length)
                    for (var n = Number(t.split("-")[0]); n <= Number(t.split("-")[1]); n++)
                        i.push(n.toString());
                else
                    i.push(t)
            }),
            0 === i.filter(function(e, t) {
                return i.indexOf(e) !== t
            }).length
        },
        isEmptyString: function(e) {
            return !e || "" === e.trim()
        },
        isDefined: function(e) {
            return void 0 !== e
        },
        isContainHttpOrHttps: function(e) {
            return /https?:\/\//.test(e)
        },
        isHttpsUrl: function(e) {
            return /https:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g.test(e)
        },
        isValidCaptivePortalUrl: function(e) {
            return /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/.test(e)
        },
        isValidCaptivePortalUrlWithOrWithourHttpHttps: function(e) {
            return /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/.test(e) || /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/.test(e)
        },
        isFQDN: function(e) {
            return /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$/.test(e)
        },
        isFQDNOrEmpty: function(e) {
            return /^$|^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$/.test(e)
        },
        isPhoneNumber: function(e) {
            return /^((\+\d{1,3}(-| )?\(?\d\)?(-| )?\d{1,5})|(\(?\d{2,6}\)?))(-| )?(\d{3,4})(-| )?(\d{4})(( x| ext)\d{1,5}){0,1}$/.test(e)
        },
        isInteger: function(e) {
            return /^[0-9]*$/.test(e)
        },
        isShortFormInteger: function(e) {
            return new RegExp("^[0-9]$|^[1-9][0-9]*$").test(e)
        },
        getLimitedDevicesValidator: function(n) {
            return {
                validator: function(e) {
                    var t = e ? e.length : 0;
                    return !n || t <= n
                },
                error: e("ovValidator.msg.maxSelectedDevices", {
                    devices: t("formatNumber")(n)
                })
            }
        },
        isStrongPassword: function(e) {
            return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[_!@$\^&#\.\-*%`~]).{8,}/.test(e)
        },
